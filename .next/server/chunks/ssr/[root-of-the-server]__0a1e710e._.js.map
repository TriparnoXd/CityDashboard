{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-weather-summary.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Summarizes the weather forecast into a concise, human-readable paragraph.\n *\n * - generateWeatherSummary - A function that generates the weather summary.\n * - GenerateWeatherSummaryInput - The input type for the generateWeatherSummary function.\n * - GenerateWeatherSummaryOutput - The return type for the generateWeatherSummary function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateWeatherSummaryInputSchema = z.object({\n  temperature: z.number().describe('The current temperature in Celsius.'),\n  humidity: z.number().describe('The current humidity percentage.'),\n  windSpeed: z.number().describe('The current wind speed in kilometers per hour.'),\n  weatherConditions: z.string().describe('A description of the current weather conditions, e.g., sunny, cloudy, rainy.'),\n  hourlyForecast: z.array(z.object({\n    time: z.string().describe('The time of the forecast.'),\n    temperature: z.number().describe('The temperature in Celsius.'),\n    weatherConditions: z.string().describe('A description of the weather conditions, e.g., sunny, cloudy, rainy.'),\n  })).describe('An array of hourly forecasts for the next 24 hours.'),\n  dailyForecast: z.array(z.object({\n    day: z.string().describe('The day of the forecast.'),\n    highTemperature: z.number().describe('The high temperature in Celsius.'),\n    lowTemperature: z.number().describe('The low temperature in Celsius.'),\n    weatherConditions: z.string().describe('A description of the weather conditions, e.g., sunny, cloudy, rainy.'),\n  })).describe('An array of daily forecasts for the next 7 days.'),\n  weatherAlerts: z.array(z.string()).optional().describe('An optional array of weather alerts.'),\n});\nexport type GenerateWeatherSummaryInput = z.infer<typeof GenerateWeatherSummaryInputSchema>;\n\nconst GenerateWeatherSummaryOutputSchema = z.object({\n  summary: z.string().describe('A concise summary of the weather forecast in points and phrases.'),\n});\nexport type GenerateWeatherSummaryOutput = z.infer<typeof GenerateWeatherSummaryOutputSchema>;\n\nexport async function generateWeatherSummary(input: GenerateWeatherSummaryInput): Promise<GenerateWeatherSummaryOutput> {\n  return generateWeatherSummaryFlow(input);\n}\n\nconst generateWeatherSummaryPrompt = ai.definePrompt({\n  name: 'generateWeatherSummaryPrompt',\n  input: {schema: GenerateWeatherSummaryInputSchema},\n  output: {schema: GenerateWeatherSummaryOutputSchema},\n  prompt: `Summarize the weather forecast based on the following information:\\n\\nCurrent Conditions:\\nTemperature: {{temperature}}째C\\nHumidity: {{humidity}}%\\nWind Speed: {{windSpeed}} km/h\\nConditions: {{weatherConditions}}\\n\\nHourly Forecast:\\n{{#each hourlyForecast}}\\n  {{time}}: {{temperature}}째C, {{weatherConditions}}\\n{{/each}}\\n\\nDaily Forecast:\\n{{#each dailyForecast}}\\n  {{day}}: High {{highTemperature}}째C, Low {{lowTemperature}}째C, {{weatherConditions}}\\n{{/each}}\\n\\n{{#if weatherAlerts}}\\n  Weather Alerts:\\n  {{#each weatherAlerts}}\\n    - {{this}}\\n  {{/each}}\\n{{/if}}\\n\\nWrite a concise and easy-to-understand summary using bullet points and short phrases.`,\n});\n\nconst generateWeatherSummaryFlow = ai.defineFlow(\n  {\n    name: 'generateWeatherSummaryFlow',\n    inputSchema: GenerateWeatherSummaryInputSchema,\n    outputSchema: GenerateWeatherSummaryOutputSchema,\n  },\n  async input => {\n    const {output} = await generateWeatherSummaryPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACvC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC/B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,IAAI,QAAQ,CAAC;IACb,eAAe,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC9B,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACzB,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACrC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACpC,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,IAAI,QAAQ,CAAC;IACb,eAAe,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,GAAG,QAAQ,CAAC;AACzD;AAGA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,uBAAuB,KAAkC;IAC7E,OAAO,2BAA2B;AACpC;AAEA,MAAM,+BAA+B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACnD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC,ypBAAypB,CAAC;AACrqB;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,6BAA6B;IACpD,OAAO;AACT;;;IApBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { generateWeatherSummary, type GenerateWeatherSummaryInput } from '@/ai/flows/generate-weather-summary';\n\nexport async function getSummary(input: GenerateWeatherSummaryInput): Promise<string> {\n  try {\n    const result = await generateWeatherSummary(input);\n    return result.summary;\n  } catch (error) {\n    console.error(\"Error generating weather summary:\", error);\n    return \"I'm sorry, but I was unable to generate a weather summary at this time. Please try again later.\";\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,WAAW,KAAkC;IACjE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,oJAAA,CAAA,yBAAsB,AAAD,EAAE;QAC5C,OAAO,OAAO,OAAO;IACvB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;IACT;AACF;;;IARsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 346, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getSummary as '405e285e21f48414fc806733337e148a1348948d2e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}