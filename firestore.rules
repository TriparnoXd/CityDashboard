/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * read and write their own data.
 *
 * Data Structure:
 * All user data is stored under the `/users/{userId}` path.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Users can only modify their own profile data.
 * - Listing all users is explicitly forbidden.
 *
 * Denormalization for Authorization:
 * The `userId` is used in the path `/users/{userId}` and MUST match the
 * `uid` field in the document itself upon creation. Updates must not
 * change this `uid` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profiles. Each user can only read and write their own data.
     * @path /users/{userId}
     * @allow (get) User with UID 'CxUOCOd86pTgfgcVxW0aoqLnvs53' can read their own profile data.
     * @allow (create) User with UID 'CxUOCOd86pTgfgcVxW0aoqLnvs53' can create their profile data.
     * @allow (update) User with UID 'CxUOCOd86pTgfgcVxW0aoqLnvs53' can update their own profile data.
     * @allow (delete) User with UID 'CxUOCOd86pTgfgcVxW0aoqLnvs53' can delete their own profile data.
     * @deny (get) User with UID 'otherUserId' cannot read the profile data of 'CxUOCOd86pTgfgcVxW0aoqLnvs53'.
     * @deny (create) User with UID 'otherUserId' cannot create a profile for 'CxUOCOd86pTgfgcVxW0aoqLnvs53'.
     * @deny (update) User with UID 'otherUserId' cannot update the profile data of 'CxUOCOd86pTgfgcVxW0aoqLnvs53'.
     * @deny (delete) User with UID 'otherUserId' cannot delete the profile data of 'CxUOCOd86pTgfgcVxW0aoqLnvs53'.
     * @principle Enforces user-ownership for all data access.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to read their own profile.
      allow get: if isOwner(userId);

      // Prevent listing of all users.
      allow list: if false;

      // Allow a user to create their own profile, enforcing uid consistency.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Allow a user to update their own profile, preventing uid changes.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Allow a user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }
  }
}