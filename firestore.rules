/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data stored under the `/users/{userId}` path. Users can only read and write their own data.
 *
 * Data Structure:
 * All user data is nested under the `/users/{userId}` collection. Each document represents a single user's profile and preferences.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - Data consistency between the path and document ID is enforced on create and update.
 * - Only authenticated users can access data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for documents under /users/{userId}.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Allow user with UID 'user_abc' to create their own document.
     *   Request: { "auth": { "uid": "user_abc" }, "resource": { "data": { "uid": "user_abc", "email": "test@example.com" } } }
     * @allow (get, update, delete) - Allow user with UID 'user_abc' to get, update, and delete their own document.
     *   Request: { "auth": { "uid": "user_abc" } }
     * @deny (create) - Deny user with UID 'user_def' from creating a document for 'user_abc'.
     *   Request: { "auth": { "uid": "user_def" }, "resource": { "data": { "uid": "user_abc", "email": "test@example.com" } } }
     * @deny (get, update, delete) - Deny user with UID 'user_def' from getting, updating, and deleting the document of 'user_abc'.
     *   Request: { "auth": { "uid": "user_def" } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreation(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is to create own resource.
     */
    function isSelfCreation(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}