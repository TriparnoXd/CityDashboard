/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all user-specific data.
 * Each user can only read and write their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The {userId} in the path
 *   must match the authenticated user's UID.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - The location property is writable by the user.
 *
 * Denormalization for Authorization:
 * No denormalization is needed in this case as the userId can be accessed
 * via request.auth.uid and compared to the document id.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read and write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with uid "CxUOCOd86pTgfgcVxW0aoqLnvs53" can create their own profile.
     * @allow (update) User with uid "CxUOCOd86pTgfgcVxW0aoqLnvs53" can update their own profile.
     * @allow (delete) User with uid "CxUOCOd86pTgfgcVxW0aoqLnvs53" can delete their own profile.
     * @deny (create) User with uid "DIFFERENT_UID" cannot create a profile with ID "CxUOCOd86pTgfgcVxW0aoqLnvs53".
     * @deny (update) User with uid "DIFFERENT_UID" cannot update the profile with ID "CxUOCOd86pTgfgcVxW0aoqLnvs53".
     * @deny (delete) User with uid "DIFFERENT_UID" cannot delete the profile with ID "CxUOCOd86pTgfgcVxW0aoqLnvs53".
     * @principle Enforces document ownership, ensuring users can only manage their own data.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to read their own profile.
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile, but enforce that the userId in the path matches the uid in the data.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Allow the user to update their own profile.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }
  }
}